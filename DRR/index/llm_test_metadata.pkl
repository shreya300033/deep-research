gASV9B0AAAAAAAB9lCiMCG1ldGFkYXRhlF2UKH2UKIwIY2h1bmtfaWSUjAthaV9iYXNpY3NfMJSMC2RvY3VtZW50X2lklIwJYWlfYmFzaWNzlIwFdGl0bGWUjCdJbnRyb2R1Y3Rpb24gdG8gQXJ0aWZpY2lhbCBJbnRlbGxpZ2VuY2WUjAZzb3VyY2WUjAtzYW1wbGVfZGF0YZSMC2NodW5rX2luZGV4lEsAjApjaHVua190ZXh0lFimAwAACiAgICAgICAgICAgICAgICBBcnRpZmljaWFsIEludGVsbGlnZW5jZSAoQUkpIGlzIGEgYnJhbmNoIG9mIGNvbXB1dGVyIHNjaWVuY2UgdGhhdCBhaW1zIHRvIGNyZWF0ZSAKICAgICAgICAgICAgICAgIGludGVsbGlnZW50IG1hY2hpbmVzIHRoYXQgY2FuIHBlcmZvcm0gdGFza3MgdGhhdCB0eXBpY2FsbHkgcmVxdWlyZSBodW1hbiBpbnRlbGxpZ2VuY2UuIAogICAgICAgICAgICAgICAgVGhlc2UgdGFza3MgaW5jbHVkZSBsZWFybmluZywgcmVhc29uaW5nLCBwcm9ibGVtLXNvbHZpbmcsIHBlcmNlcHRpb24sIGFuZCBsYW5ndWFnZSB1bmRlcnN0YW5kaW5nLgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBBSSBjYW4gYmUgY2F0ZWdvcml6ZWQgaW50byB0d28gbWFpbiB0eXBlczogTmFycm93IEFJIGFuZCBHZW5lcmFsIEFJLiBOYXJyb3cgQUkgaXMgZGVzaWduZWQgCiAgICAgICAgICAgICAgICB0byBwZXJmb3JtIHNwZWNpZmljIHRhc2tzLCB3aGlsZSBHZW5lcmFsIEFJIHdvdWxkIGhhdmUgdGhlIGFiaWxpdHkgdG8gdW5kZXJzdGFuZCwgbGVhcm4sIAogICAgICAgICAgICAgICAgYW5kIGFwcGx5IGtub3dsZWRnZSBhY3Jvc3MgZGlmZmVyZW50IGRvbWFpbnMuCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIE1hY2hpbmUgTGVhcm5pbmcgaXMgYSBzdWJzZXQgb2YgQUkgdGhhdCBmb2N1c2VzIG9uIGFsZ29yaXRobXMgdGhhdCBjYW4gbGVhcm4gZnJvbSBkYXRhLiAKICAgICAgICAgICAgICAgIERlZXAgTGVhcm5pbmcsIGluIHR1cm4sIGlzIGEgc3Vic2V0IG9mIG1hY2hpbmUgbGVhcm5pbmcgdGhhdCB1c2VzIG5ldXJhbCBuZXR3b3JrcyB3aXRoIAogICAgICAgICAgICAgICAgbXVsdGlwbGUgbGF5ZXJzIHRvIG1vZGVsIGFuZCB1bmRlcnN0YW5kIGNvbXBsZXggcGF0dGVybnMgaW4gZGF0YS4KICAgICAgICAgICAgICAgIJSMDHRvdGFsX2NodW5rc5RLAYwJdmVjdG9yX2lklEsAdX2UKGgEjA9tbF9hbGdvcml0aG1zXzCUaAaMDW1sX2FsZ29yaXRobXOUaAiMJE1hY2hpbmUgTGVhcm5pbmcgQWxnb3JpdGhtcyBPdmVydmlld5RoCmgLaAxLAGgNWNkDAAAKICAgICAgICAgICAgICAgIE1hY2hpbmUgTGVhcm5pbmcgYWxnb3JpdGhtcyBjYW4gYmUgYnJvYWRseSBjbGFzc2lmaWVkIGludG8gdGhyZWUgY2F0ZWdvcmllczogCiAgICAgICAgICAgICAgICBTdXBlcnZpc2VkIExlYXJuaW5nLCBVbnN1cGVydmlzZWQgTGVhcm5pbmcsIGFuZCBSZWluZm9yY2VtZW50IExlYXJuaW5nLgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBTdXBlcnZpc2VkIExlYXJuaW5nIGFsZ29yaXRobXMgbGVhcm4gZnJvbSBsYWJlbGVkIHRyYWluaW5nIGRhdGEgdG8gbWFrZSBwcmVkaWN0aW9ucyAKICAgICAgICAgICAgICAgIG9uIG5ldywgdW5zZWVuIGRhdGEuIENvbW1vbiBhbGdvcml0aG1zIGluY2x1ZGUgTGluZWFyIFJlZ3Jlc3Npb24sIERlY2lzaW9uIFRyZWVzLCAKICAgICAgICAgICAgICAgIFJhbmRvbSBGb3Jlc3QsIGFuZCBTdXBwb3J0IFZlY3RvciBNYWNoaW5lcy4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgVW5zdXBlcnZpc2VkIExlYXJuaW5nIGFsZ29yaXRobXMgZmluZCBoaWRkZW4gcGF0dGVybnMgaW4gZGF0YSB3aXRob3V0IGxhYmVsZWQgZXhhbXBsZXMuIAogICAgICAgICAgICAgICAgRXhhbXBsZXMgaW5jbHVkZSBLLU1lYW5zIGNsdXN0ZXJpbmcsIEhpZXJhcmNoaWNhbCBjbHVzdGVyaW5nLCBhbmQgUHJpbmNpcGFsIENvbXBvbmVudCBBbmFseXNpcy4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgUmVpbmZvcmNlbWVudCBMZWFybmluZyBpbnZvbHZlcyBhbiBhZ2VudCBsZWFybmluZyB0byBtYWtlIGRlY2lzaW9ucyBieSB0YWtpbmcgYWN0aW9ucyAKICAgICAgICAgICAgICAgIGluIGFuIGVudmlyb25tZW50IHRvIG1heGltaXplIGN1bXVsYXRpdmUgcmV3YXJkLiBUaGlzIGFwcHJvYWNoIGlzIHVzZWQgaW4gZ2FtZSBwbGF5aW5nLCAKICAgICAgICAgICAgICAgIHJvYm90aWNzLCBhbmQgYXV0b25vbW91cyBzeXN0ZW1zLgogICAgICAgICAgICAgICAglGgPSwFoEEsBdX2UKGgEjBJubHBfZnVuZGFtZW50YWxzXzCUaAaMEG5scF9mdW5kYW1lbnRhbHOUaAiMKE5hdHVyYWwgTGFuZ3VhZ2UgUHJvY2Vzc2luZyBGdW5kYW1lbnRhbHOUaApoC2gMSwBoDVjpAwAACiAgICAgICAgICAgICAgICBOYXR1cmFsIExhbmd1YWdlIFByb2Nlc3NpbmcgKE5MUCkgaXMgYSBmaWVsZCBvZiBBSSB0aGF0IGZvY3VzZXMgb24gdGhlIGludGVyYWN0aW9uIAogICAgICAgICAgICAgICAgYmV0d2VlbiBjb21wdXRlcnMgYW5kIGh1bWFucyB0aHJvdWdoIG5hdHVyYWwgbGFuZ3VhZ2UuIFRoZSB1bHRpbWF0ZSBvYmplY3RpdmUgb2YgTkxQIAogICAgICAgICAgICAgICAgaXMgdG8gcmVhZCwgZGVjaXBoZXIsIHVuZGVyc3RhbmQsIGFuZCBtYWtlIHNlbnNlIG9mIGh1bWFuIGxhbmd1YWdlIGluIGEgdmFsdWFibGUgd2F5LgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBLZXkgTkxQIHRhc2tzIGluY2x1ZGU6CiAgICAgICAgICAgICAgICAtIFRleHQgQ2xhc3NpZmljYXRpb246IENhdGVnb3JpemluZyB0ZXh0IGludG8gcHJlZGVmaW5lZCBjbGFzc2VzCiAgICAgICAgICAgICAgICAtIE5hbWVkIEVudGl0eSBSZWNvZ25pdGlvbjogSWRlbnRpZnlpbmcgYW5kIGNsYXNzaWZ5aW5nIG5hbWVkIGVudGl0aWVzCiAgICAgICAgICAgICAgICAtIFNlbnRpbWVudCBBbmFseXNpczogRGV0ZXJtaW5pbmcgdGhlIGVtb3Rpb25hbCB0b25lIG9mIHRleHQKICAgICAgICAgICAgICAgIC0gTWFjaGluZSBUcmFuc2xhdGlvbjogVHJhbnNsYXRpbmcgdGV4dCBmcm9tIG9uZSBsYW5ndWFnZSB0byBhbm90aGVyCiAgICAgICAgICAgICAgICAtIFF1ZXN0aW9uIEFuc3dlcmluZzogQXV0b21hdGljYWxseSBhbnN3ZXJpbmcgcXVlc3Rpb25zIHBvc2VkIGluIG5hdHVyYWwgbGFuZ3VhZ2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgTW9kZXJuIE5MUCBzeXN0ZW1zIG9mdGVuIHVzZSB0cmFuc2Zvcm1lci1iYXNlZCBtb2RlbHMgbGlrZSBCRVJULCBHUFQsIGFuZCBUNSwgCiAgICAgICAgICAgICAgICB3aGljaCBoYXZlIGFjaGlldmVkIHN0YXRlLW9mLXRoZS1hcnQgcGVyZm9ybWFuY2Ugb24gbWFueSBOTFAgdGFza3MuCiAgICAgICAgICAgICAgICCUaA9LAWgQSwJ1fZQoaASMEWNvbXB1dGVyX3Zpc2lvbl8wlGgGjA9jb21wdXRlcl92aXNpb26UaAiMJENvbXB1dGVyIFZpc2lvbiBhbmQgSW1hZ2UgUHJvY2Vzc2luZ5RoCmgLaAxLAGgNWA8EAAAKICAgICAgICAgICAgICAgIENvbXB1dGVyIFZpc2lvbiBpcyBhIGZpZWxkIG9mIEFJIHRoYXQgdHJhaW5zIGNvbXB1dGVycyB0byBpbnRlcnByZXQgYW5kIHVuZGVyc3RhbmQgCiAgICAgICAgICAgICAgICB0aGUgdmlzdWFsIHdvcmxkLiBVc2luZyBkaWdpdGFsIGltYWdlcyBmcm9tIGNhbWVyYXMgYW5kIHZpZGVvcyBhbmQgZGVlcCBsZWFybmluZyBtb2RlbHMsIAogICAgICAgICAgICAgICAgbWFjaGluZXMgY2FuIGFjY3VyYXRlbHkgaWRlbnRpZnkgYW5kIGNsYXNzaWZ5IG9iamVjdHMgYW5kIHJlYWN0IHRvIHdoYXQgdGhleSBzZWUuCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIENvbW1vbiBjb21wdXRlciB2aXNpb24gdGFza3MgaW5jbHVkZToKICAgICAgICAgICAgICAgIC0gSW1hZ2UgQ2xhc3NpZmljYXRpb246IElkZW50aWZ5aW5nIG9iamVjdHMgaW4gaW1hZ2VzCiAgICAgICAgICAgICAgICAtIE9iamVjdCBEZXRlY3Rpb246IExvY2F0aW5nIGFuZCBjbGFzc2lmeWluZyBtdWx0aXBsZSBvYmplY3RzIGluIGltYWdlcwogICAgICAgICAgICAgICAgLSBJbWFnZSBTZWdtZW50YXRpb246IFBhcnRpdGlvbmluZyBpbWFnZXMgaW50byBtZWFuaW5nZnVsIHJlZ2lvbnMKICAgICAgICAgICAgICAgIC0gRmFjZSBSZWNvZ25pdGlvbjogSWRlbnRpZnlpbmcgb3IgdmVyaWZ5aW5nIGluZGl2aWR1YWxzIGZyb20gZmFjaWFsIGltYWdlcwogICAgICAgICAgICAgICAgLSBPcHRpY2FsIENoYXJhY3RlciBSZWNvZ25pdGlvbjogRXh0cmFjdGluZyB0ZXh0IGZyb20gaW1hZ2VzCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIENvbnZvbHV0aW9uYWwgTmV1cmFsIE5ldHdvcmtzIChDTk5zKSBhcmUgdGhlIHByaW1hcnkgYXJjaGl0ZWN0dXJlIHVzZWQgaW4gY29tcHV0ZXIgdmlzaW9uLCAKICAgICAgICAgICAgICAgIHdpdGggbW9kZWxzIGxpa2UgUmVzTmV0LCBWR0csIGFuZCBFZmZpY2llbnROZXQgYWNoaWV2aW5nIGV4Y2VsbGVudCBwZXJmb3JtYW5jZSBvbiB2YXJpb3VzIHRhc2tzLgogICAgICAgICAgICAgICAglGgPSwFoEEsDdX2UKGgEjAthaV9ldGhpY3NfMJRoBowJYWlfZXRoaWNzlGgIjCFFdGhpY3MgaW4gQXJ0aWZpY2lhbCBJbnRlbGxpZ2VuY2WUaApoC2gMSwBoDVjfAwAACiAgICAgICAgICAgICAgICBBcyBBSSBzeXN0ZW1zIGJlY29tZSBtb3JlIHBvd2VyZnVsIGFuZCB3aWRlc3ByZWFkLCBldGhpY2FsIGNvbnNpZGVyYXRpb25zIGJlY29tZSBpbmNyZWFzaW5nbHkgCiAgICAgICAgICAgICAgICBpbXBvcnRhbnQuIEtleSBldGhpY2FsIGlzc3VlcyBpbiBBSSBpbmNsdWRlOgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAtIEJpYXMgYW5kIEZhaXJuZXNzOiBBSSBzeXN0ZW1zIGNhbiBwZXJwZXR1YXRlIG9yIGFtcGxpZnkgaHVtYW4gYmlhc2VzIHByZXNlbnQgaW4gdHJhaW5pbmcgZGF0YQogICAgICAgICAgICAgICAgLSBQcml2YWN5OiBBSSBzeXN0ZW1zIG9mdGVuIHJlcXVpcmUgbGFyZ2UgYW1vdW50cyBvZiBwZXJzb25hbCBkYXRhCiAgICAgICAgICAgICAgICAtIFRyYW5zcGFyZW5jeTogTWFueSBBSSBzeXN0ZW1zIG9wZXJhdGUgYXMgImJsYWNrIGJveGVzIiB3aXRoIHVuY2xlYXIgZGVjaXNpb24tbWFraW5nIHByb2Nlc3NlcwogICAgICAgICAgICAgICAgLSBBY2NvdW50YWJpbGl0eTogRGV0ZXJtaW5pbmcgcmVzcG9uc2liaWxpdHkgd2hlbiBBSSBzeXN0ZW1zIG1ha2UgaGFybWZ1bCBkZWNpc2lvbnMKICAgICAgICAgICAgICAgIC0gSm9iIERpc3BsYWNlbWVudDogVGhlIHBvdGVudGlhbCBpbXBhY3Qgb2YgQUkgYXV0b21hdGlvbiBvbiBlbXBsb3ltZW50CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIFJlc3BvbnNpYmxlIEFJIGRldmVsb3BtZW50IGludm9sdmVzIGNvbnNpZGVyaW5nIHRoZXNlIGV0aGljYWwgaW1wbGljYXRpb25zIHRocm91Z2hvdXQgdGhlIAogICAgICAgICAgICAgICAgZGVzaWduIGFuZCBkZXBsb3ltZW50IHByb2Nlc3MsIGltcGxlbWVudGluZyBmYWlybmVzcyBtZWFzdXJlcywgZW5zdXJpbmcgdHJhbnNwYXJlbmN5LCAKICAgICAgICAgICAgICAgIGFuZCBtYWludGFpbmluZyBodW1hbiBvdmVyc2lnaHQgb2YgQUkgc3lzdGVtcy4KICAgICAgICAgICAgICAgIJRoD0sBaBBLBHV9lChoBIwXbGFyZ2VfbGFuZ3VhZ2VfbW9kZWxzXzCUaAaMFWxhcmdlX2xhbmd1YWdlX21vZGVsc5RoCIwcTGFyZ2UgTGFuZ3VhZ2UgTW9kZWxzIChMTE1zKZRoCmgLaAxLAGgNWGoHAAAKICAgICAgICAgICAgICAgIExhcmdlIExhbmd1YWdlIE1vZGVscyAoTExNcykgYXJlIGEgdHlwZSBvZiBhcnRpZmljaWFsIGludGVsbGlnZW5jZSBzeXN0ZW0gdGhhdCB1c2VzIGRlZXAgbGVhcm5pbmcgCiAgICAgICAgICAgICAgICB0ZWNobmlxdWVzIHRvIHByb2Nlc3MgYW5kIGdlbmVyYXRlIGh1bWFuLWxpa2UgdGV4dC4gVGhlc2UgbW9kZWxzIGFyZSB0cmFpbmVkIG9uIHZhc3QgYW1vdW50cyBvZiAKICAgICAgICAgICAgICAgIHRleHQgZGF0YSBmcm9tIHRoZSBpbnRlcm5ldCwgYm9va3MsIGFydGljbGVzLCBhbmQgb3RoZXIgc291cmNlcy4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgS2V5IGNoYXJhY3RlcmlzdGljcyBvZiBMTE1zOgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAtIFNjYWxlOiBMTE1zIGNvbnRhaW4gYmlsbGlvbnMgb3IgZXZlbiB0cmlsbGlvbnMgb2YgcGFyYW1ldGVycywgbWFraW5nIHRoZW0gZXh0cmVtZWx5IGxhcmdlCiAgICAgICAgICAgICAgICAtIFRyYWluaW5nIERhdGE6IFRoZXkgYXJlIHRyYWluZWQgb24gbWFzc2l2ZSBkYXRhc2V0cyBjb250YWluaW5nIHRleHQgZnJvbSBkaXZlcnNlIHNvdXJjZXMKICAgICAgICAgICAgICAgIC0gVHJhbnNmb3JtZXIgQXJjaGl0ZWN0dXJlOiBNb3N0IG1vZGVybiBMTE1zIHVzZSB0aGUgdHJhbnNmb3JtZXIgbmV1cmFsIG5ldHdvcmsgYXJjaGl0ZWN0dXJlCiAgICAgICAgICAgICAgICAtIEdlbmVyYXRpdmUgQ2FwYWJpbGl0aWVzOiBUaGV5IGNhbiBnZW5lcmF0ZSBjb2hlcmVudCwgY29udGV4dHVhbGx5IHJlbGV2YW50IHRleHQKICAgICAgICAgICAgICAgIC0gRmV3LXNob3QgTGVhcm5pbmc6IFRoZXkgY2FuIHBlcmZvcm0gbmV3IHRhc2tzIHdpdGggbWluaW1hbCBleGFtcGxlcyBvciBpbnN0cnVjdGlvbnMKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgUG9wdWxhciBleGFtcGxlcyBvZiBMTE1zIGluY2x1ZGU6CiAgICAgICAgICAgICAgICAtIEdQVCAoR2VuZXJhdGl2ZSBQcmUtdHJhaW5lZCBUcmFuc2Zvcm1lcikgc2VyaWVzIGJ5IE9wZW5BSQogICAgICAgICAgICAgICAgLSBCRVJUIChCaWRpcmVjdGlvbmFsIEVuY29kZXIgUmVwcmVzZW50YXRpb25zIGZyb20gVHJhbnNmb3JtZXJzKSBieSBHb29nbGUKICAgICAgICAgICAgICAgIC0gVDUgKFRleHQtdG8tVGV4dCBUcmFuc2ZlciBUcmFuc2Zvcm1lcikgYnkgR29vZ2xlCiAgICAgICAgICAgICAgICAtIFBhTE0gKFBhdGh3YXlzIExhbmd1YWdlIE1vZGVsKSBieSBHb29nbGUKICAgICAgICAgICAgICAgIC0gTExhTUEgKExhcmdlIExhbmd1YWdlIE1vZGVsIE1ldGEgQUkpIGJ5IE1ldGEKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgQXBwbGljYXRpb25zIG9mIExMTXM6CiAgICAgICAgICAgICAgICAtIFRleHQgZ2VuZXJhdGlvbiBhbmQgY29tcGxldGlvbgogICAgICAgICAgICAgICAgLSBRdWVzdGlvbiBhbnN3ZXJpbmcgYW5kIGNoYXRib3RzCiAgICAgICAgICAgICAgICAtIExhbmd1YWdlIHRyYW5zbGF0aW9uCiAgICAgICAgICAgICAgICAtIENvZGUgZ2VuZXJhdGlvbiBhbmQgcHJvZ3JhbW1pbmcgYXNzaXN0YW5jZQogICAgICAgICAgICAgICAgLSBDb250ZW50IHN1bW1hcml6YXRpb24KICAgICAgICAgICAgICAgIC0gQ3JlYXRpdmUgd3JpdGluZyBhbmQgc3Rvcnl0ZWxsaW5nCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIExMTXMgcmVwcmVzZW50IGEgc2lnbmlmaWNhbnQgYWR2YW5jZW1lbnQgaW4gbmF0dXJhbCBsYW5ndWFnZSBwcm9jZXNzaW5nIGFuZCBoYXZlIHJldm9sdXRpb25pemVkIAogICAgICAgICAgICAgICAgaG93IHdlIGludGVyYWN0IHdpdGggQUkgc3lzdGVtcyBmb3IgdGV4dC1iYXNlZCB0YXNrcy4KICAgICAgICAgICAgICAgIJRoD0sBaBBLBXVljA5pZF90b19tZXRhZGF0YZR9lChLAGgDSwFoEUsCaBZLA2gbSwRoIEsFaCV1jAlkaW1lbnNpb26UTYABdS4=